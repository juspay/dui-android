/*
* Copyright (c) 2012-2017 "JUSPAY Technologies"
* JUSPAY Technologies Pvt. Ltd. [https://www.juspay.in]
*
* This file is part of JUSPAY Platform.
*
* JUSPAY Platform is free software: you can redistribute it and/or modify
* it for only educational purposes under the terms of the GNU Affero General
* Public License (GNU AGPL) as published by the Free Software Foundation,
* either version 3 of the License, or (at your option) any later version.
* For Enterprise/Commerical licenses, contact <info@juspay.in>.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  The end user will
* be liable for all damages without limitation, which is caused by the
* ABUSE of the LICENSED SOFTWARE and shall INDEMNIFY JUSPAY for such
* damages, claims, cost, including reasonable attorney fee claimed on Juspay.
* The end user has NO right to claim any indemnification based on its use
* of Licensed Software. See the GNU Affero General Public License for more details.
*
* You should have received a copy of the GNU Affero General Public License
* along with this program. If not, see <https://www.gnu.org/licenses/agpl.html>.
*/


import com.amazonaws.auth.AWSCredentials
import com.amazonaws.auth.PropertiesFileCredentialsProvider
import com.amazonaws.services.s3.AmazonS3
import com.amazonaws.services.s3.AmazonS3Client
import com.amazonaws.services.s3.model.CannedAccessControlList
import com.amazonaws.services.s3.model.PutObjectRequest
import com.amazonaws.services.s3.transfer.TransferManager

import javax.mail.Multipart
import javax.mail.PasswordAuthentication
import javax.mail.Session
import javax.mail.Transport

buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:2.3.3'
        classpath 'com.eriwen:gradle-js-plugin:1.9.0'
        classpath 'com.amazonaws:aws-java-sdk:1.7.3'
        classpath 'javax.activation:activation:1.1'
        classpath 'javax.mail:mail:1.4.1'
    }
}

plugins{
    id 'com.eriwen.gradle.js' version '1.12.1'
}

apply plugin: 'js'
apply plugin: 'com.android.library'
apply plugin: 'maven'

repositories {
    mavenCentral()
    jcenter()
}

// grab dui.xml data
def duiConfigVars = (new XmlSlurper().parseText(new File("${projectDir}/src/main/res/values/dui.xml").text)).string

def duiVersion = duiConfigVars?.find{it.@name.text() == "dui_version"}?.text()?:""
def buildVersion = duiConfigVars?.find{it.@name.text() == "build_version"}?.text()?:""


android {
    compileSdkVersion 25
    buildToolsVersion '25.0.3'
    useLibrary  'org.apache.http.legacy'


    defaultConfig {
        minSdkVersion 11
        targetSdkVersion 25
    }
    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile 'com.android.support:support-v4:25.3.1'
    compile group: 'com.github.bumptech.glide', name: 'glide', version: '4.0.0'
}

tasks.create(name: 'mavenPrep') << {
    project.ext.set("mavenRepo", "/tmp/_mvn_dui")
    File f = new File(project.mavenRepo)
    f.exists() && f.deleteDir() && f.mkdir() || f.mkdir()
}

project.ext.set("pomVersion", duiVersion)
uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: "file://localhost/tmp/_mvn_dui")
            pom.groupId = 'in.juspay'
            pom.artifactId = 'mystique'
            pom.version = project.pomVersion
        }
    }
}

import javax.mail.internet.InternetAddress
import javax.mail.internet.MimeBodyPart
import javax.mail.internet.MimeMessage
import javax.mail.internet.MimeMultipart;

// upload all the build artifacts to S3.
tasks.create(name: "s3Uploader") << {
    String mailContent;
    String changeLog;

    def askForChangeLog = {
        def console = System.console()
        if (console) {
            changeLog = console.readLine('\n>>>> Brief Changelog: ')
            println("....")
        } else {
            logger.error "Cannot get console."
        }
    }

    def prepareMail = {
        mailContent =
        """<font color="black">Hello,
        <br/><br/>A new version has been uploaded for DUI
        <br/><br/>Build configuration details:<br/>
        <br/><b>Dui Version</b>: ${duiVersion}
        <br/><b>Build Version</b>: ${buildVersion}
        <br/><b>Changelog</b>: ${changeLog}
        <br/><br/>Thanks,<br/>Team DUI</font>
        """
        println("Writing body content....")
    }

    def sendEmail = {
        def userHome = System.getProperty("user.home")
        def configFile = new File("${userHome}/.godel/GodelConfig.groovy")

        if(!configFile.exists()) {
            println "Sorry but config file ${configFile.absolutePath + "/" + configFile.absoluteFile} was not found"
            System.exit(-1)
        }
        def config = new ConfigSlurper().parse(configFile.toURL())
        def user = config.smtp.username
        def passwd = config.smtp.password
        def props = new Properties() ;

        props.put("mail.smtp.host", config.smtp.host);
        props.put("mail.smtp.user", user);
        props.put("mail.smtp.port", config.smtp.port);
        props.put("mail.smtp.starttls.enable","true") ;
        props.put("mail.smtp.auth", "true") ;
        Multipart multiPart = new MimeMultipart();

        MimeBodyPart messageText = new MimeBodyPart();
        messageText.setContent(mailContent, "text/html; charset=utf-8");
        multiPart.addBodyPart(messageText);

        Session session = Session.getInstance(props,
                new javax.mail.Authenticator() {
                    protected PasswordAuthentication getPasswordAuthentication() {
                        return new PasswordAuthentication(user, passwd);
                    }
                });
        def msg = new MimeMessage(session) ;

        println("Preparing e-mail....")
        msg.setContent(multiPart) ;
        msg.setSubject("DUI version updated to ${duiVersion}");
        msg.setFrom(new InternetAddress("no-reply@juspay.in")) ;
        msg.setReplyTo(new InternetAddress("dui@juspay.in"))
        msg.addRecipient(MimeMessage.RecipientType.TO, new InternetAddress("dui@juspay.in")) ;
        println("Sending mail for version: ${duiVersion}")
        println("Please be patient...")
        Transport.send(msg)
        println "Email has been sent!"
    }

    def s3Upload = {

        AWSCredentials awsCreds = new PropertiesFileCredentialsProvider(System.getProperty("user.home")+"/.godel/aws.properties").getCredentials();
        AmazonS3 s3 = new AmazonS3Client(awsCreds)
        TransferManager tx = new TransferManager(awsCreds)
        // push maven artifacts
        def upload = tx.uploadDirectory("release", "dui", new File("/tmp/_mvn_dui"), true)
        upload.waitForCompletion()
        tx.shutdownNow()

        // push eclipse style build
        def artifact = new File("build/outputs/aar/mystique-release-${project.pomVersion}.tar.gz")
        def key = "stable/${artifact.name}"
        def putObjectReq = new PutObjectRequest("release", key, artifact)
        putObjectReq.setCannedAcl(CannedAccessControlList.PublicRead)
        s3.putObject(putObjectReq)
    }

    askForChangeLog()
    prepareMail();
    sendEmail()
    s3Upload();
}

// Task to create tar.gz that can be used as a project dependency for eclipse based projects
task createEclipseStyleProject(type: Exec) {
    workingDir "${projectDir}"
    commandLine './to_eclipse.sh'
    println project.pomVersion
    args(["mystique-release", project.pomVersion])
    standardOutput = new ByteArrayOutputStream()
    ext.output = {
        return standardOutput.toString()
    }
}

mavenPrep.dependsOn("assemble")
uploadArchives.dependsOn("mavenPrep")
createEclipseStyleProject.dependsOn("uploadArchives")
s3Uploader.dependsOn(createEclipseStyleProject)

